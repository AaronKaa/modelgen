//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes {{meta.modelVersion}}
///

import Foundation

///
/// A type-erased `KubernetesAPIResource` that wraps the actual resource instance.
///
public struct AnyKubernetesAPIResource: KubernetesAPIResource {

	private enum CodingKeys: String, CodingKey {
		case apiVersion
		case kind
	}

	/// The concrete wrapped resource instance.
	private let resource: KubernetesAPIResource

	/// This resource's `apiVersion`.
	public var apiVersion: String

	/// This resource's `kind`.
	public var kind: String

	/// This resource's `meta.v1.ObjectMeta` object.
	public var metadata: meta.v1.ObjectMeta?

	/// Creates a new type-erased `AnyKubernetesAPIResource` instance wrapping the given resource.
	///
	/// - Parameter resource: The resource to wrap/type-erase
	public init(_ resource: KubernetesAPIResource) {
		self.resource = resource
		self.apiVersion = resource.apiVersion
		self.kind = resource.kind
		self.metadata = resource.metadata
	}

	public init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)

		let decodedAPIVersion: String?
		if container.contains(.apiVersion) {
			decodedAPIVersion = try container.decode(String.self, forKey: .apiVersion)
		} else {
			decodedAPIVersion = decoder.userInfo[CodingUserInfoKey.apiVersion] as? String
		}

		let decodedKind: String?
		if container.contains(.kind) {
			decodedKind = try container.decode(String.self, forKey: .kind)
		} else {
			decodedKind = decoder.userInfo[CodingUserInfoKey.kind] as? String
		}

		let decodedPluralName = decoder.userInfo[CodingUserInfoKey.resources] as? String

		if let apiVersion = decodedAPIVersion, let kind = decodedKind {
			try self.init(gvk: GroupVersionKind(apiVersion: apiVersion, kind: kind), decoder: decoder)
		} else if let apiVersion = decodedAPIVersion, let pluralName = decodedPluralName {
			try self.init(gvr: GroupVersionResource(apiVersion: apiVersion, resource: pluralName), decoder: decoder)
		} else {
			throw SwiftkubeModelError.decodingError("Couldn't decode resource at: \(container.codingPath)")
		}
	}

	public init(gvk: GroupVersionKind?, decoder: Decoder) throws {
		let decoded: KubernetesAPIResource
		switch gvk {
{% for gvk in groupVersionKinds %}
		case GroupVersionKind.{{ gvk|GVK.case }}:
			decoded = try {{ gvk|GVK.type }}(from: decoder){% endfor %}
		default:
			decoded = try UnstructuredResource(from: decoder)
		}

		self.init(decoded)
	}

	public init(gvr: GroupVersionResource?, decoder: Decoder) throws {
		let decoded: KubernetesAPIResource
		switch gvr {
{% for gvk in groupVersionKinds %}
		case GroupVersionResource.{{ gvk|GVK.case }}:
			decoded = try {{ gvk|GVK.type }}(from: decoder){% endfor %}
		default:
			decoded = try UnstructuredResource(from: decoder)
		}

		self.init(decoded)
	}

	public func encode(to encoder: Encoder) throws {
		try resource.encode(to: encoder)
	}
}
