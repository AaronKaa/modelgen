//
// Copyright 2020 Iskandar Abudiab (iabudiab.dev)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes {{meta.modelVersion}}
///

import Foundation

public struct AnyKubernetesAPIResource: KubernetesAPIResource {

	private enum CodingKeys: String, CodingKey {
		case apiVersion
		case kind
	}

	private let resource: KubernetesAPIResource

	public var apiVersion: String

	public var kind: String

	public var metadata: meta.v1.ObjectMeta?

	public init(_ resource: KubernetesAPIResource) {
		self.resource = resource
		self.apiVersion = resource.apiVersion
		self.kind = resource.kind
		self.metadata = resource.metadata
	}

	public init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		let apiVersionString = try container.decode(String.self, forKey: .apiVersion)
		let kindString = try container.decode(String.self, forKey: .kind)

		let gvk = GroupVersionKind(rawValue: "\(apiVersionString)/\(kindString)")

		let decoded: KubernetesAPIResource
		switch gvk {
{% for gvk in allGVK %}
		case .{{ gvk|GVK.case }}:
			decoded = try {{ gvk|GVK.type }}.init(from: decoder){% endfor %}
		default:
			let context = DecodingError.Context(
				codingPath: [CodingKeys.apiVersion, CodingKeys.kind],
				debugDescription: "Unknown Kubernetes object gvk: \(String(describing: gvk))"
			)
			throw DecodingError.dataCorrupted(context)
		}

		self.init(decoded)
	}

	public func encode(to encoder: Encoder) throws {
		try resource.encode(to: encoder)
	}
}
