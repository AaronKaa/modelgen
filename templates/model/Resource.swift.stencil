//
// Copyright 2020 Swiftkube Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

///
/// Generated by Swiftkube:ModelGen
/// Kubernetes {{meta.modelVersion}}
/// {{ type.group }}.{{ type.version }}.{{ type.kind }}
///

import Foundation

public extension {{ type.group|P.escapeKeywords }}.{{ type.version }} {

	{{ resource|R.renderDescription }}
	struct {{ type.kind }}: {{ resource|R.protocols }}
{% if resource.isListResource %}

		///
		/// KubernetesResourceList.Item associated type
		///
		public typealias Item = {{ type.group|P.escapeKeywords }}.{{ type.version }}.{{ type.listItemKind }}
{% endif %}
{% if resource.isListableResource %}

		///
		/// ListableResource.List associated type
		///
		public typealias List = {{ type.group|P.escapeKeywords }}.{{ type.version }}.{{ type.listItemKind }}List
{% endif %}

{% for property in resource.properties %}
{{ property|P.renderDescription }}
		{{ property|P.render}}{% endfor %}
		///
		/// Default memberwise initializer
		///
		public init(

{% for property in resource.properties where property.constValue == nil %}
			{{ property|P.renderArg }}{{ property|P.renderArgDefaultNil }}{% if not forloop.last %},{% endif %}{% endfor %}
		) {

{% for property in resource.properties where property.constValue == nil %}
			self.{{ property.name|P.escapeKeywords }} = {{ property.name|P.escapeKeywords }}{% endfor %}
		}
	}
}{% if resource.properties.count > 0 %}

///
/// Codable conformance
///
public extension {{ type.group|P.escapeKeywords }}.{{ type.version }}.{{ type.kind }} {

	private enum CodingKeys: String, CodingKey {
{% for property in resource.properties %}
		case {{ property.name|P.escapeKeywords }} = "{{ property.name }}"{% endfor %}
	}

	init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
{% for property in resource.properties %}
{% if not property.constValue %}
		self.{{ property.name|P.escapeKeywords }} = try container.{% if property.required %}decode{% else %}decodeIfPresent{% endif %}({{ property|P.type }}.self, forKey: .{{ property.name|P.escapeKeywords }})
{% endif %}
{% endfor %}
	}

	func encode(to encoder: Encoder) throws {
		var encodingContainer = encoder.container(keyedBy: CodingKeys.self)
{% for property in resource.properties %}
		try encodingContainer.encode({{ property.name|P.escapeKeywords }}, forKey: .{{ property.name|P.escapeKeywords }}){% endfor %}
	}
}{% endif %}{% if resource.isListResource %}

// MARK: - {{ type.group|P.escapeKeywords }}.{{ type.version }}.{{ type.kind }} + Sequence

///
/// Sequence iterator for KubernetesResourceList items
///
extension {{ type.group|P.escapeKeywords }}.{{ type.version }}.{{ type.kind }}: Sequence {

	public typealias Element = {{ type.group|P.escapeKeywords }}.{{ type.version }}.{{ type.listItemKind }}

	public func makeIterator() -> AnyIterator<{{ type.group|P.escapeKeywords }}.{{ type.version }}.{{ type.listItemKind }}> {
		AnyIterator(items.makeIterator())
	}
}{% endif %}
